q()
find.package("devtools")
find.package("devtools")
find.package()
install.packages()
install.packages("devtools")
library("devtools")
find_rtools()
install.packages("KernSmooth")
library("kernsmooth")
library(KernSmooth)
x <-1
X
x<-1
print(x)
x
msg<-"hello"
msg
y<-3 #test
y
print(x)(y)
X<-1:20
print(x)
X
X<-1:100
X
X<-1:1000
X
X<-1:1,000,000
X<-1:1000000
X
X<-1:10000
X
y<-c(True,2)
y<-c("True",2)
y
y<-c(TRUE,2)
y
y<-c(1.7,a)
y<-c(1.7,"a")
y
X<-factors(yes,no,yes,no)
x<-factor(c(yes,no,yes))
x<-factor(c(1,2,3,4,5))
x
x<-factor(c(1,1,1,1,1,2,2))
x
table(x)
unclass(x)
x<-factor(c("yes","yes","no"))
levels=c("yes","no")
x
x<-factor(c("yes","yes","yes","no","no")),levels=c("no","yes")
x<-factor(c("yes","yes","yes","no","no")),
read table()
read.table()
x<-1:3
names(x)
names(x)<-c("Eva","Devam","Vipul")
x
y<-matrix(1:25,nrow=5,ncol=5)
dimnames(y)<-list(c("a","b","c","d","e"),c("u","v","x","y","z"))
y
housing_price_index_2008_09_q4_100 <- read.csv("~/Eva Shah/Coursera/R Programming/training data/public data/housing_price_index_2008_09_q4_100.csv", header=FALSE)
View(housing_price_index_2008_09_q4_100)
read.table("C:\Users\SV Tech Holdings\Documents\Eva Shah\Coursera\R Programming\training data\bdc data_private/4Q14_BDC_Portfolios.xlsx")
X<-1:4
y<-2
x+y
X<-c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
x<-list(2,"a","b",TRUE)
warnings()
a<-list(2,"a","b",TRUE)
a[[1]]
is.numeric(2)
getwd()
swirl()
library(xml)
library(xlsx)
install.packages(xml)
install.packages(xlsx)
install.packages("xlsx",dep=T)
library(xlsx)
q()
install.packages(c('car', 'foreign', 'MASS', 'psych', 'sciplot', 'gplots', 'pwr', 'gvlma', 'relimp', 'lmSupport', 'effects', 'mediation', 'Hmisc', 'lme4', 'AICcmodavg', 'pbkrtest', 'plyr', 'reshape2'))
install.packages("gdata",dep=T)
install.packages("xlsx",dep=T)
library(gdata)
installXLSXsupport(perl = 'C:\\strawberry\\perl\\bin\\perl.exe
installXLSXsupport(perl = 'C:\\strawberry\\perl\\bin\\perl.exe')
installXLSXsupport(perl = 'C:\strawberry\perl\bin\perl.exe')
perl <- "C:/strawberry/perl/bin/perl5.18.2.exe"
try1file <- read.xls("my.one.filename.xls", perl = perl)
download.file("perl")
download.file(perl,destfile="perl")
q()
library(httr)
library(XML)
con = get("http://www.exclusively.com/")
con=GET("http://www.exclusively.com/")
con2=content(con,as="text")
parsedHtml = htmlParse(con2,asText=TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
names(con2)
names(parsedHtml)
names(con)
xpathSApply(parsedHtml,"times",xmlValue)
xpathSApply(con,"handle",xmlValue)
parsedHtml
close(con)
close.connection(con)
close.connection()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile()
created=h5createFile("example.h5")
created
created=h5createGroup("example.h5","1")
created=h5CreateGroup("example.h5","2")
created=h5createGroup("example.h5","2")
created=h5createGroup("example.h5","1/1")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","1/1/A")
h5ls("example.h5")
h5ls("example.h5/1/1/A")
h5ls("example.h5","1/1")
read1=h5read("example.h5","1")
h5close()
H5close()
read1=h5read("example.h5","1/1/A")
read1
h5ls("example.h5")
library(httr)
install.packages(httr)
install.packages(curl)
library(devtools)
install_github("hadley/httr")
library(httr)
install.packages(httr)
install_github("hadley/httr")
install.packages("httr")
library(httr)
library(RMySQL)
install.package(DBI)
install.packages(DBI)
install.packages("DBI")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables(1:5)
allTables[1:5]
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github",key="9a2ec6b1853322b076ba",secret="b36210597fa5f51f9885a7f24545eacf548d0e3e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages(httpuv)
install.packages(c("Rcpp", "httpuv", "shiny"))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
stop_for_status(req)
gtoken <- config(token = github_token)
req <- GET("https://github.com/settings/applications/312122", gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
q()
loading(httr)
library(httr)
library(curl)
curl<-"https://api.github.com/users/jtleek/repos"
curl https://api.github.com/users/jtleek/repos
curl<-https://api.github.com/users/jtleek/repos
q()
sqldf("SELECT COUNT (*) from acs")
library("RMySQL")
library("sqldf")
sqldf("SELECT COUNT (*) from acs")
MySQL()
library("RMySQL")
acs <-dbConnect(MySQL(),host="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
q()
q()
rm(list())
q(list())
install.packages("MySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
q()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
by_package
summarize(by_package,mean(size))
0
exit()
quit()
swirl()
library(swirl)
swirl()
swirl()
install.packages("lubridate")
library(lubridate)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12,1975")
mdy("March 12,1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(03:22:14)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
update(this_moment)
update(this_moment,hours(this_moment),minutes(this_moment))
update(this_moment)<-now()
update(this_moment,hours(),minutes())
this_moment<-update(this_moment,hours(),minutes())
this_moment<-update(hours(this_moment),minutes(this_moment))
this_moment<-update(hours(),minutes())
this_moment<-now()
update(this_moment,hours=10,minutes=16,seconds=0)
this_moment
?now
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tx
?with_tz
with_tz(arrive,tzone="Hongkong")
with_tz(arrive,tzone="Asia/Hong_kong")
with_tz(arrive,"Asia/Hong_kong")
arrive<-with_tz(arrive,"Asia/Hong_kong")
arrive<-with_tz(arrive, "Asia/Hong_kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long<-new.interval(last_time,arrive)
how_long<-new.interval("last_time","arrive")
how_long<-new_interval("last_time","arrive")
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
rm(list=ls())
library(dplyr)
getwd()
setwd("C:/Users/SV Tech Holdings/Documents/Coursera/Getting_Cleaning_Data/Week4/train/Inertial Signals")
# read text files into data table and apply column name
total_acc_x<-merge(data.frame(scan("total_acc_x_train.txt",skip=1,sep="",quiet=TRUE)),data.frame(scan("total_acc_x_test.txt",skip=1,sep="",quiet=TRUE)))
memory.limit()
help(memory.size)
memory.size()
memory.limit()
memory.limit(size=10000)
memory.limit()
rm(list=ls())
library(dplyr)
getwd()
setwd("C:/Users/SV Tech Holdings/Documents/Coursera/Getting_Cleaning_Data/Week4/train/Inertial Signals")
# read text files into data table and apply column name
total_acc_x<-merge(data.frame(scan("total_acc_x_train.txt",skip=1,sep="",quiet=TRUE)),data.frame(scan("total_acc_x_test.txt",skip=1,sep="",quiet=TRUE)))
object.sizes <- function(obs=ls(envir=.GlobalEnv))
{
return(rev(sort(sapply(obs, function (object.name) object.size(get(object.name))))))
}
pie(object.sizes(), main="Memory usage by object")
gc()
gc()
